import logging
from telegram import Update
from telegram.ext import ContextTypes
from database import get_db_session, User, Task, UserTask, Project
import keyboards as kb
import states
import utils
from datetime import datetime

logger = logging.getLogger(__name__)

class MessageHandlers:
    def __init__(self, application):
        self.application = application
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_state = context.user_data.get('state')
        user = utils.get_user_by_telegram_id(update.effective_user.id)
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_state == 'waiting_task_answer':
            await self.handle_task_answer_text(update, context)
        elif user_state == 'waiting_task_answer_media':
            await self.handle_task_answer_media(update, context)
        elif user_state == 'waiting_clarification':
            await self.handle_clarification(update, context)
        elif user_state == 'waiting_feedback':
            await self.handle_feedback(update, context)
        elif user_state == 'waiting_broadcast_message':
            await self.handle_broadcast_message(update, context)
        elif user_state == 'waiting_edit_name':
            await self.handle_edit_name(update, context)
        elif user_state == 'waiting_edit_status':
            await self.handle_edit_status(update, context)
        elif user_state == 'waiting_add_admin':
            await self.handle_add_admin(update, context)
        elif user_state == 'waiting_remove_admin':
            await self.handle_remove_admin(update, context)
        elif user_state == 'waiting_add_user':
            await self.handle_add_user(update, context)
        elif user_state == 'waiting_remove_user':
            await self.handle_remove_user(update, context)
        else:
            # –û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if user.role == 'admin':
                await update.message.reply_text(
                    "üë®‚Äçüíº –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º",
                    reply_markup=kb.admin_main_menu()
                )
            else:
                await update.message.reply_text(
                    "üè† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                    reply_markup=kb.user_main_menu()
                )
    
    async def handle_task_answer_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        task_id = context.user_data.get('current_task_id')
        user = utils.get_user_by_telegram_id(update.effective_user.id)
        
        session = get_db_session()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç
            existing_answer = session.query(UserTask).filter(
                UserTask.user_id == user.id,
                UserTask.task_id == task_id
            ).first()
            
            if existing_answer:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
                existing_answer.answer_text = update.message.text
                existing_answer.submitted_at = datetime.now()
                existing_answer.status = 'pending'
                existing_answer.feedback = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–¥–±–µ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                user_task = UserTask(
                    user_id=user.id,
                    task_id=task_id,
                    answer_text=update.message.text,
                    submitted_at=datetime.now(),
                    status='pending'
                )
                session.add(user_task)
            
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            task = session.query(Task).filter(Task.id == task_id).first()
            project = session.query(Project).filter(Project.id == task.project_id).first()
            
            admins = session.query(User).filter(User.role == 'admin').all()
            for admin in admins:
                try:
                    message = f"üéØ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ!\n\n"
                    message += f"üìÇ –ü—Ä–æ–µ–∫—Ç: {project.name}\n"
                    message += f"üìù –ó–∞–¥–∞–Ω–∏–µ: {task.title}\n"
                    message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username})\n"
                    message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                    
                    keyboard = [
                        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"view_answer_{user_task.id}")]
                    ]
                    
                    await self.application.bot.send_message(
                        chat_id=admin.user_id,
                        text=message,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                except Exception as e:
                    logger.error(f"Error notifying admin {admin.user_id}: {e}")
            
            await update.message.reply_text(
                "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=kb.back_button("my_tasks")
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['state'] = None
            context.user_data['current_task_id'] = None
            
        except Exception as e:
            logger.error(f"Error saving task answer: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
        finally:
            session.close()
    
    async def handle_task_answer_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –≤ –æ—Ç–≤–µ—Ç–∞—Ö (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ)
        await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
    
    async def handle_clarification(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        task_id = context.user_data.get('clarify_task_id')
        question = update.message.text
        user = utils.get_user_by_telegram_id(update.effective_user.id)
        
        session = get_db_session()
        try:
            task = session.query(Task).filter(Task.id == task_id).first()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∞–º
            admins = session.query(User).filter(User.role == 'admin').all()
            for admin in admins:
                try:
                    message = f"‚ùì –í–æ–ø—Ä–æ—Å –ø–æ –∑–∞–¥–∞–Ω–∏—é!\n\n"
                    message += f"üìÇ –ü—Ä–æ–µ–∫—Ç: {session.query(Project).filter(Project.id == task.project_id).first().name}\n"
                    message += f"üìù –ó–∞–¥–∞–Ω–∏–µ: {task.title}\n"
                    message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username})\n"
                    message += f"‚ùì –í–æ–ø—Ä–æ—Å: {question}\n"
                    message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                    
                    keyboard = [
                        [InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_clarification_{user.id}_{task_id}")]
                    ]
                    
                    await self.application.bot.send_message(
                        chat_id=admin.user_id,
                        text=message,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                except Exception as e:
                    logger.error(f"Error sending clarification to admin {admin.user_id}: {e}")
            
            await update.message.reply_text(
                "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                reply_markup=kb.back_button("my_tasks")
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['state'] = None
            context.user_data['clarify_task_id'] = None
            
        except Exception as e:
            logger.error(f"Error handling clarification: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞")
        finally:
            session.close()
    
    async def handle_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_task_id = context.user_data.get('feedback_user_task_id')
        feedback_text = update.message.text
        
        session = get_db_session()
        try:
            user_task = session.query(UserTask).filter(UserTask.id == user_task_id).first()
            if user_task:
                user_task.feedback = feedback_text
                user_task.status = 'rejected'
                user_task.reviewed_at = datetime.now()
                
                session.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = session.query(User).filter(User.id == user_task.user_id).first()
                task = session.query(Task).filter(Task.id == user_task.task_id).first()
                
                try:
                    message = f"üí¨ –ü–æ–ª—É—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å!\n\n"
                    message += f"üìù –ó–∞–¥–∞–Ω–∏–µ: {task.title}\n"
                    message += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {feedback_text}\n\n"
                    message += "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–¥–µ–ª–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
                    
                    await self.application.bot.send_message(
                        chat_id=user.user_id,
                        text=message,
                        reply_markup=kb.back_button("my_tasks")
                    )
                except Exception as e:
                    logger.error(f"Error notifying user about feedback: {e}")
                
                await update.message.reply_text(
                    "‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!",
                    reply_markup=kb.admin_main_menu()
                )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['state'] = None
            context.user_data['feedback_user_task_id'] = None
            
        except Exception as e:
            logger.error(f"Error saving feedback: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
        finally:
            session.close()
    
    async def handle_broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        broadcast_data = context.user_data.get('broadcast_data', {})
        message_text = update.message.text
        
        session = get_db_session()
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_to_notify = []
            
            if broadcast_data['type'] == 'all':
                users_to_notify = session.query(User).all()
            elif broadcast_data['type'] == 'project':
                project_users = session.query(UserProject).filter(
                    UserProject.project_id == broadcast_data['project_id']
                ).all()
                user_ids = [up.user_id for up in project_users]
                users_to_notify = session.query(User).filter(User.id.in_(user_ids)).all()
            elif broadcast_data['type'] == 'user':
                user = session.query(User).filter(User.id == broadcast_data['user_id']).first()
                if user:
                    users_to_notify = [user]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            success_count = 0
            for user in users_to_notify:
                try:
                    await self.application.bot.send_message(
                        chat_id=user.user_id,
                        text=message_text
                    )
                    success_count += 1
                except Exception as e:
                    logger.error(f"Error sending broadcast to user {user.user_id}: {e}")
            
            await update.message.reply_text(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {success_count}/{len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!",
                reply_markup=kb.admin_main_menu()
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('broadcast_data', None)
            context.user_data['state'] = None
            
        except Exception as e:
            logger.error(f"Error in broadcast: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        finally:
            session.close()
    
    async def handle_edit_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        new_name = update.message.text
        user = utils.get_user_by_telegram_id(update.effective_user.id)
        
        session = get_db_session()
        try:
            user.full_name = new_name
            session.commit()
            
            await update.message.reply_text(
                "‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!",
                reply_markup=kb.user_main_menu()
            )
            context.user_data['state'] = None
        except Exception as e:
            logger.error(f"Error updating name: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")
        finally:
            session.close()
    
    async def handle_edit_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        new_status = update.message.text
        user = utils.get_user_by_telegram_id(update.effective_user.id)
        
        session = get_db_session()
        try:
            user.status = new_status
            session.commit()
            
            await update.message.reply_text(
                "‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",
                reply_markup=kb.user_main_menu()
            )
            context.user_data['state'] = None
        except Exception as e:
            logger.error(f"Error updating status: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        finally:
            session.close()
    
    async def handle_add_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        username = update.message.text.strip('@')
        current_admin = utils.get_user_by_telegram_id(update.effective_user.id)
        
        session = get_db_session()
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.query(User).filter(User.username == username).first()
            if not user:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start",
                    reply_markup=kb.back_button("admin_manage")
                )
                return
            
            # –î–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
            user.role = 'admin'
            session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            from database import AdminAction
            admin_action = AdminAction(
                admin_id=current_admin.id,
                action_type='add_admin',
                target_id=user.id,
                details=f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {user.full_name} (@{user.username})"
            )
            session.add(admin_action)
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            try:
                await self.application.bot.send_message(
                    chat_id=user.user_id,
                    text="üéâ –í–∞–º –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
                )
            except Exception as e:
                logger.error(f"Error notifying new admin: {e}")
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                reply_markup=kb.admin_main_menu()
            )
            
            context.user_data['state'] = None
            
        except Exception as e:
            logger.error(f"Error adding admin: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        finally:
            session.close()
    
    async def handle_remove_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        username = update.message.text.strip('@')
        current_admin = utils.get_user_by_telegram_id(update.effective_user.id)
        
        session = get_db_session()
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.query(User).filter(User.username == username).first()
            if not user:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=kb.back_button("admin_manage")
                )
                return
            
            if user.id == current_admin.id:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è!",
                    reply_markup=kb.back_button("admin_manage")
                )
                return
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            user.role = 'user'
            session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            from database import AdminAction
            admin_action = AdminAction(
                admin_id=current_admin.id,
                action_type='remove_admin',
                target_id=user.id,
                details=f"–£–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {user.full_name} (@{user.username})"
            )
            session.add(admin_action)
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ –∞–¥–º–∏–Ω–∞
            try:
                await self.application.bot.send_message(
                    chat_id=user.user_id,
                    text="‚ÑπÔ∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã."
                )
            except Exception as e:
                logger.error(f"Error notifying removed admin: {e}")
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                reply_markup=kb.admin_main_menu()
            )
            
            context.user_data['state'] = None
            
        except Exception as e:
            logger.error(f"Error removing admin: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        finally:
            session.close()