import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackContext
from database import get_db_session, User, Project, Task, UserTask, UserProject, AdminAction
import keyboards as kb
import states
from datetime import datetime, timedelta
import utils

logger = logging.getLogger(__name__)

class AdminHandlers:
    def __init__(self, application):
        self.application = application
    
    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
        if data == "admin_main":
            await self.show_admin_main_menu(query)
        elif data == "admin_projects":
            await self.show_projects_management(query)
        elif data == "admin_manage":
            await self.show_admin_management(query)
        elif data == "admin_create_task":
            await self.start_create_task(query, context)
        elif data == "admin_view_answers":
            await self.show_admin_view_answers(query)
        elif data == "admin_users":
            await self.show_user_management(query)
        elif data == "admin_broadcast":
            await self.start_broadcast(query, context)
        elif data == "admin_archive":
            await self.show_archive(query)
        elif data == "exit_admin":
            await query.edit_message_text("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return states.ConversationHandler.END
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        elif data == "projects_list":
            await self.show_projects_list(query)
        elif data == "project_create":
            await self.start_create_project(query, context)
        elif data.startswith("project_detail_"):
            project_id = int(data.split('_')[2])
            await self.show_project_detail(query, project_id)
        elif data.startswith("project_users_"):
            project_id = int(data.split('_')[2])
            await self.show_project_users(query, project_id)
        elif data.startswith("project_tasks_"):
            project_id = int(data.split('_')[2])
            await self.show_project_tasks(query, project_id)
        elif data.startswith("project_archive_"):
            project_id = int(data.split('_')[2])
            await self.confirm_archive_project(query, project_id)
        elif data.startswith("project_add_board_"):
            project_id = int(data.split('_')[3])
            await self.start_add_project_board(query, context, project_id)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏
        elif data == "admin_add":
            await self.start_add_admin(query, context)
        elif data == "admin_remove":
            await self.start_remove_admin(query, context)
        elif data == "admin_list":
            await self.show_admin_list(query)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        elif data.startswith("confirm_"):
            await self.handle_confirmation(query, data)
        elif data == "cancel_action":
            await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.back_button("admin_main"))
    
    async def show_admin_main_menu(self, query):
        await query.edit_message_text(
            "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å B&DPracticeKUB\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb.admin_main_menu()
        )
    
    async def show_projects_management(self, query):
        await query.edit_message_text(
            "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏:\n\n"
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∞—Ä—Ö–∏–≤",
            reply_markup=kb.projects_management_menu()
        )
    
    async def show_projects_list(self, query):
        session = get_db_session()
        try:
            projects = session.query(Project).filter(Project.is_archived == False).all()
            
            if not projects:
                await query.edit_message_text(
                    "üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç!",
                    reply_markup=kb.back_button("admin_projects")
                )
                return
            
            text = "üìÅ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:\n\n"
            keyboard = []
            
            for project in projects:
                participants_count = session.query(UserProject).filter(UserProject.project_id == project.id).count()
                tasks_count = session.query(Task).filter(Task.project_id == project.id, Task.is_active == True).count()
                
                text += f"üìÇ {project.name}\n"
                text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
                text += f"   üìù –ó–∞–¥–∞–Ω–∏–π: {tasks_count}\n"
                text += f"   üìÖ –°–æ–∑–¥–∞–Ω: {project.created_at.strftime('%d.%m.%Y')}\n\n"
                
                keyboard.append([
                    InlineKeyboardButton(f"üìã {project.name}", callback_data=f"project_detail_{project.id}")
                ])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_projects")])
            
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        finally:
            session.close()
    
    async def show_project_detail(self, query, project_id):
        session = get_db_session()
        try:
            project = session.query(Project).filter(Project.id == project_id).first()
            if not project:
                await query.edit_message_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            participants_count = session.query(UserProject).filter(UserProject.project_id == project.id).count()
            tasks_count = session.query(Task).filter(Task.project_id == project.id, Task.is_active == True).count()
            
            text = f"üìÇ –ü—Ä–æ–µ–∫—Ç: {project.name}\n\n"
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {project.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            text += f"üîó –î–æ—Å–∫–∞: {project.board_link or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
            text += f"üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {tasks_count}\n"
            text += f"üìÖ –°–æ–∑–¥–∞–Ω: {project.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            await query.edit_message_text(text, reply_markup=kb.project_actions_menu(project_id))
        finally:
            session.close()
    
    async def start_create_project(self, query, context):
        context.user_data['create_project'] = {}
        await query.edit_message_text(
            "üèó –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
            reply_markup=kb.back_button("admin_projects")
        )
        return states.CREATE_PROJECT_NAME
    
    async def handle_create_project_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        project_name = update.message.text
        context.user_data['create_project']['name'] = project_name
        
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
            reply_markup=kb.back_button("admin_projects")
        )
        return states.CREATE_PROJECT_DESC
    
    async def handle_create_project_desc(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        project_desc = update.message.text
        context.user_data['create_project']['description'] = project_desc
        
        await update.message.reply_text(
            "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—â—É—é –¥–æ—Å–∫—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=kb.back_button("admin_projects")
        )
        return states.CREATE_PROJECT_BOARD
    
    async def handle_create_project_board(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        board_link = update.message.text
        if board_link != '-':
            context.user_data['create_project']['board_link'] = board_link
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –±–∞–∑—É
        session = get_db_session()
        try:
            admin_user = utils.get_user_by_telegram_id(update.effective_user.id)
            
            project = Project(
                name=context.user_data['create_project']['name'],
                description=context.user_data['create_project']['description'],
                board_link=context.user_data['create_project'].get('board_link'),
                created_by=admin_user.id
            )
            
            session.add(project)
            session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            admin_action = AdminAction(
                admin_id=admin_user.id,
                action_type='create_project',
                target_id=project.id,
                details=f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project.name}"
            )
            session.add(admin_action)
            session.commit()
            
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                reply_markup=kb.admin_main_menu()
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('create_project', None)
            
        except Exception as e:
            logger.error(f"Error creating project: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        finally:
            session.close()
        
        return states.ConversationHandler.END
    
    async def start_create_task(self, query, context):
        session = get_db_session()
        try:
            projects = session.query(Project).filter(Project.is_archived == False).all()
            
            if not projects:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç!",
                    reply_markup=kb.back_button("admin_main")
                )
                return states.ConversationHandler.END
            
            context.user_data['create_task'] = {}
            
            await query.edit_message_text(
                "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
                reply_markup=kb.projects_list_keyboard(projects, "select_project_task")
            )
            return states.CREATE_TASK_PROJECT
        finally:
            session.close()
    
    async def handle_create_task_project(self, update: Update, context: ContextTypes.DEFAULT_TYPE, project_id):
        context.user_data['create_task']['project_id'] = project_id
        
        await update.callback_query.edit_message_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=kb.back_button("admin_main")
        )
        return states.CREATE_TASK_TITLE
    
    async def handle_create_task_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        task_title = update.message.text
        context.user_data['create_task']['title'] = task_title
        
        await update.message.reply_text(
            "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=kb.back_button("admin_main")
        )
        return states.CREATE_TASK_DESC
    
    async def handle_create_task_desc(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        task_desc = update.message.text
        context.user_data['create_task']['description'] = task_desc
        
        await update.message.reply_text(
            "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=kb.back_button("admin_main")
        )
        return states.CREATE_TASK_MEDIA
    
    async def handle_create_task_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∏ —Ñ–æ—Ç–æ
        if update.message.photo:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]
            context.user_data['create_task']['image_file_id'] = photo.file_id
        elif update.message.text == '-':
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞
            pass
        
        await update.message.reply_text(
            "üë• –ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–≤—Å–µ–º' –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞\n"
            "–ò–ª–∏ @username –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "–ò–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ @username —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª",
            reply_markup=kb.back_button("admin_main")
        )
        return states.CREATE_TASK_TARGET
    
    async def handle_create_task_target(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        target_text = update.message.text
        context.user_data['create_task']['target'] = target_text
        
        await update.message.reply_text(
            "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú)\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω",
            reply_markup=kb.back_button("admin_main")
        )
        return states.CREATE_TASK_DEADLINE
    
    async def handle_create_task_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        deadline_text = update.message.text
        
        session = get_db_session()
        try:
            # –ü–∞—Ä—Å–∏–º –¥–µ–¥–ª–∞–π–Ω
            deadline = None
            if deadline_text != '-':
                try:
                    deadline = datetime.strptime(deadline_text, '%d.%m.%Y %H:%M')
                except ValueError:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                    )
                    return states.CREATE_TASK_DEADLINE
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
            project_id = context.user_data['create_task']['project_id']
            admin_user = utils.get_user_by_telegram_id(update.effective_user.id)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
            task = Task(
                project_id=project_id,
                title=context.user_data['create_task']['title'],
                description=context.user_data['create_task']['description'],
                deadline=deadline,
                created_by=admin_user.id
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            target_text = context.user_data['create_task']['target']
            target_users = []
            
            if target_text.lower() == '–≤—Å–µ–º':
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞
                project_users = session.query(UserProject).filter(UserProject.project_id == project_id).all()
                target_users = [up.user_id for up in project_users]
            else:
                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username
                usernames = [username.strip('@') for username in target_text.split() if username.startswith('@')]
                for username in usernames:
                    user = session.query(User).filter(User.username == username).first()
                    if user:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ–µ–∫—Ç–µ
                        user_project = session.query(UserProject).filter(
                            UserProject.user_id == user.id,
                            UserProject.project_id == project_id
                        ).first()
                        if user_project:
                            target_users.append(user.id)
            
            task.target_users = target_users
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
            session.add(task)
            session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            admin_action = AdminAction(
                admin_id=admin_user.id,
                action_type='create_task',
                target_id=task.id,
                details=f"–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {task.title} –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {task.project_id}"
            )
            session.add(admin_action)
            session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            await self.notify_users_about_new_task(task, target_users)
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ '{task.title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(target_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!",
                reply_markup=kb.admin_main_menu()
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('create_task', None)
            
        except Exception as e:
            logger.error(f"Error creating task: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")
        finally:
            session.close()
        
        return states.ConversationHandler.END
    
    async def notify_users_about_new_task(self, task, target_user_ids):
        session = get_db_session()
        try:
            for user_id in target_user_ids:
                user = session.query(User).filter(User.id == user_id).first()
                if user:
                    try:
                        message = f"üéØ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n\n"
                        message += f"üìÇ –ü—Ä–æ–µ–∫—Ç: {session.query(Project).filter(Project.id == task.project_id).first().name}\n"
                        message += f"üìù {task.title}\n"
                        message += f"üìÑ {task.description}\n"
                        if task.deadline:
                            message += f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M')}\n"
                        
                        keyboard = InlineKeyboardMarkup([[
                            InlineKeyboardButton("üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é", callback_data=f"task_detail_{task.id}")
                        ]])
                        
                        await self.application.bot.send_message(
                            chat_id=user.user_id,
                            text=message,
                            reply_markup=keyboard
                        )
                    except Exception as e:
                        logger.error(f"Error notifying user {user.user_id}: {e}")
        finally:
            session.close()
    
    async def show_admin_view_answers(self, query):
        session = get_db_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–∞–º–∏
            tasks_with_answers = session.query(Task).join(UserTask).filter(
                UserTask.status == 'pending'
            ).distinct().all()
            
            if not tasks_with_answers:
                await query.edit_message_text(
                    "üìä –û—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç.",
                    reply_markup=kb.back_button("admin_main")
                )
                return
            
            text = "üìä –û—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
            keyboard = []
            
            for task in tasks_with_answers:
                pending_count = session.query(UserTask).filter(
                    UserTask.task_id == task.id,
                    UserTask.status == 'pending'
                ).count()
                
                text += f"üìù {task.title}\n"
                text += f"   ‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {pending_count}\n\n"
                
                keyboard.append([
                    InlineKeyboardButton(f"{task.title} ({pending_count})", callback_data=f"view_task_answers_{task.id}")
                ])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")])
            
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        finally:
            session.close()

    async def show_admin_management(self, query):
        await query.edit_message_text(
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:\n\n"
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=kb.admin_management_menu()
        )
    
    async def start_add_admin(self, query, context):
        context.user_data['state'] = 'waiting_add_admin'
        await query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):",
            reply_markup=kb.back_button("admin_manage")
        )
        return states.ADD_ADMIN_USERNAME
    
    async def start_remove_admin(self, query, context):
        context.user_data['state'] = 'waiting_remove_admin'
        await query.edit_message_text(
            "‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):",
            reply_markup=kb.back_button("admin_manage")
        )
        return states.REMOVE_ADMIN_USERNAME
    
    async def show_admin_list(self, query):
        session = get_db_session()
        try:
            admins = session.query(User).filter(User.role == 'admin').all()
            
            if not admins:
                await query.edit_message_text(
                    "üìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
                    reply_markup=kb.back_button("admin_manage")
                )
                return
            
            text = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            for admin in admins:
                text += f"üë§ {admin.full_name}\n"
                text += f"   @{admin.username if admin.username else '–Ω–µ—Ç username'}\n"
                text += f"   üìÖ –° {admin.created_at.strftime('%d.%m.%Y')}\n\n"
            
            await query.edit_message_text(text, reply_markup=kb.back_button("admin_manage"))
        finally:
            session.close()
    
    async def start_broadcast(self, query, context):
        await query.edit_message_text(
            "üì¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=kb.broadcast_type_menu()
        )
    
    async def handle_broadcast_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE, broadcast_type):
        context.user_data['broadcast_data'] = {'type': broadcast_type}
        context.user_data['state'] = 'waiting_broadcast_message'
        
        if broadcast_type == 'all':
            await update.callback_query.edit_message_text(
                "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=kb.back_button("admin_main")
            )
        elif broadcast_type == 'project':
            session = get_db_session()
            try:
                projects = session.query(Project).filter(Project.is_archived == False).all()
                await update.callback_query.edit_message_text(
                    "üìÅ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
                    reply_markup=kb.projects_list_keyboard(projects, "broadcast_project")
                )
            finally:
                session.close()
            return states.BROADCAST_PROJECT
        elif broadcast_type == 'user':
            session = get_db_session()
            try:
                users = session.query(User).all()
                await update.callback_query.edit_message_text(
                    "üë§ –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                    reply_markup=kb.users_list_keyboard(users, "broadcast_user")
                )
            finally:
                session.close()
            return states.BROADCAST_USER
        
        return states.BROADCAST_MESSAGE
    
    async def handle_broadcast_project(self, update: Update, context: ContextTypes.DEFAULT_TYPE, project_id):
        context.user_data['broadcast_data']['project_id'] = project_id
        await update.callback_query.edit_message_text(
            f"üìÅ –†–∞—Å—Å—ã–ª–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=kb.back_button("admin_main")
        )
        return states.BROADCAST_MESSAGE
    
    async def handle_broadcast_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id):
        context.user_data['broadcast_data']['user_id'] = user_id
        session = get_db_session()
        try:
            user = session.query(User).filter(User.id == user_id).first()
            await update.callback_query.edit_message_text(
                f"üë§ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user.full_name}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=kb.back_button("admin_main")
            )
        finally:
            session.close()
        return states.BROADCAST_MESSAGE
    
    async def show_archive(self, query):
        session = get_db_session()
        try:
            archived_projects = session.query(Project).filter(Project.is_archived == True).all()
            
            if not archived_projects:
                await query.edit_message_text(
                    "üóÑ –ê—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç.",
                    reply_markup=kb.back_button("admin_main")
                )
                return
            
            text = "üóÑ –ê—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n\n"
            keyboard = []
            
            for project in archived_projects:
                participants_count = session.query(UserProject).filter(UserProject.project_id == project.id).count()
                text += f"üìÇ {project.name}\n"
                text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
                text += f"   üìÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: {project.created_at.strftime('%d.%m.%Y')}\n\n"
                
                keyboard.append([
                    InlineKeyboardButton(f"üìã {project.name}", callback_data=f"project_detail_{project.id}")
                ])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")])
            
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        finally:
            session.close()
    
    async def handle_confirmation(self, query, data):
        action_parts = data.split('_')
        action = action_parts[1]
        
        if action == 'archive_project':
            project_id = int(action_parts[2])
            await self.archive_project(query, project_id)
        elif action == 'delete_task':
            task_id = int(action_parts[2])
            await self.delete_task(query, task_id)
        elif action == 'approve_answer':
            user_task_id = int(action_parts[2])
            await self.approve_answer(query, user_task_id)
        elif action == 'reject_answer':
            user_task_id = int(action_parts[2])
            await self.reject_answer(query, user_task_id)
    
    async def archive_project(self, query, project_id):
        session = get_db_session()
        try:
            project = session.query(Project).filter(Project.id == project_id).first()
            if project:
                project.is_archived = True
                session.commit()
                
                await query.edit_message_text(
                    f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project.name}' –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∞—Ä—Ö–∏–≤!",
                    reply_markup=kb.back_button("admin_projects")
                )
            else:
                await query.edit_message_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"Error archiving project: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        finally:
            session.close()
    
    async def confirm_archive_project(self, query, project_id):
        session = get_db_session()
        try:
            project = session.query(Project).filter(Project.id == project_id).first()
            if project:
                await query.edit_message_text(
                    f"üóÑ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
                    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç '{project.name}'?\n\n"
                    f"‚ö†Ô∏è –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å—Ç–∞–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏.",
                    reply_markup=kb.confirmation_buttons("archive_project", project_id)
                )
        finally:
            session.close()
    
    async def approve_answer(self, query, user_task_id):
        session = get_db_session()
        try:
            user_task = session.query(UserTask).filter(UserTask.id == user_task_id).first()
            if user_task:
                user_task.status = 'approved'
                user_task.reviewed_at = datetime.now()
                session.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = session.query(User).filter(User.id == user_task.user_id).first()
                task = session.query(Task).filter(Task.id == user_task.task_id).first()
                
                try:
                    await self.application.bot.send_message(
                        chat_id=user.user_id,
                        text=f"üéâ –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ '{task.title}' –±—ã–ª —É—Ç–≤–µ—Ä–∂–¥–µ–Ω!"
                    )
                except Exception as e:
                    logger.error(f"Error notifying user about approval: {e}")
                
                await query.edit_message_text(
                    "‚úÖ –û—Ç–≤–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.",
                    reply_markup=kb.back_button("admin_view_answers")
                )
            else:
                await query.edit_message_text("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"Error approving answer: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
        finally:
            session.close()
    
    async def reject_answer(self, query, user_task_id):
        session = get_db_session()
        try:
            user_task = session.query(UserTask).filter(UserTask.id == user_task_id).first()
            if user_task:
                user_task.status = 'rejected'
                user_task.reviewed_at = datetime.now()
                session.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = session.query(User).filter(User.id == user_task.user_id).first()
                task = session.query(Task).filter(Task.id == user_task.task_id).first()
                
                try:
                    await self.application.bot.send_message(
                        chat_id=user.user_id,
                        text=f"‚ùå –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ '{task.title}' –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –∑–∞–Ω–æ–≤–æ."
                    )
                except Exception as e:
                    logger.error(f"Error notifying user about rejection: {e}")
                
                await query.edit_message_text(
                    "‚ùå –û—Ç–≤–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.",
                    reply_markup=kb.back_button("admin_view_answers")
                )
            else:
                await query.edit_message_text("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"Error rejecting answer: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
        finally:
            session.close()