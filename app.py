import os
import logging
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes, ConversationHandler
)
from database import get_db_session, User
import keyboards as kb
import states
import utils
import config
from admin_handlers import AdminHandlers
from message_handlers import MessageHandlers
from callback_handlers import CallbackHandlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BotPractice:
    def __init__(self):
        self.application = Application.builder().token(config.BOT_TOKEN).build()
        self.admin_handlers = AdminHandlers(self.application)
        self.message_handlers = MessageHandlers(self.application)
        self.callback_handlers = CallbackHandlers(self.application)
        
        self.setup_handlers()
    
    def setup_handlers(self):
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("admin", self.admin_login))
        self.application.add_handler(CommandHandler("cancel", self.cancel))
        
        # ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        admin_conv = ConversationHandler(
            entry_points=[CommandHandler("admin", self.admin_login)],
            states={
                states.ADMIN_PASSWORD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_admin_password)
                ],
                states.ADMIN_MENU: [
                    CallbackQueryHandler(self.admin_handlers.handle_admin_callback, pattern="^admin_")
                ],
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                states.CREATE_PROJECT_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.admin_handlers.handle_create_project_name)
                ],
                states.CREATE_PROJECT_DESC: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.admin_handlers.handle_create_project_desc)
                ],
                states.CREATE_PROJECT_BOARD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.admin_handlers.handle_create_project_board)
                ],
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                states.CREATE_TASK_PROJECT: [
                    CallbackQueryHandler(self.handle_task_project_selection, pattern="^select_project_task_")
                ],
                states.CREATE_TASK_TITLE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.admin_handlers.handle_create_task_title)
                ],
                states.CREATE_TASK_DESC: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.admin_handlers.handle_create_task_desc)
                ],
                states.CREATE_TASK_MEDIA: [
                    MessageHandler(filters.TEXT | filters.PHOTO, self.admin_handlers.handle_create_task_media)
                ],
                states.CREATE_TASK_TARGET: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.admin_handlers.handle_create_task_target)
                ],
                states.CREATE_TASK_DEADLINE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.admin_handlers.handle_create_task_deadline)
                ],
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏
                states.ADD_ADMIN_USERNAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handlers.handle_add_admin)
                ],
                states.REMOVE_ADMIN_USERNAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handlers.handle_remove_admin)
                ],
                
                # –†–∞—Å—Å—ã–ª–∫–∞
                states.BROADCAST_MESSAGE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handlers.handle_broadcast_message)
                ],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)],
            map_to_parent={
                ConversationHandler.END: ConversationHandler.END,
            }
        )
        self.application.add_handler(admin_conv)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.application.add_handler(CallbackQueryHandler(
            self.callback_handlers.handle_callback, 
            pattern="^(my_|project_|task_|answer_|clarify_|view_|edit_)"
        ))
        
        # –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
        self.application.add_handler(CallbackQueryHandler(
            self.callback_handlers.handle_callback,
            pattern="^(confirm_|cancel_)"
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.message_handlers.handle_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞
        self.application.add_handler(MessageHandler(
            filters.PHOTO, 
            self.message_handlers.handle_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.application.add_handler(MessageHandler(filters.ALL, self.unknown))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_data = {
            'user_id': user.id,
            'username': user.username,
            'full_name': user.full_name
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = utils.get_user_by_telegram_id(user.id)
        if not existing_user:
            utils.create_user(user_data)
            welcome_text = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ B&DPracticeKUB!\n\n"
                "üöÄ –ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–∫—Ç–∏–∫–∞ –ø—Ä–æ—â–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
        else:
            welcome_text = "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!"
        
        await update.message.reply_text(welcome_text, reply_markup=kb.user_main_menu())
    
    async def admin_login(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = utils.get_user_by_telegram_id(update.effective_user.id)
        if user and user.role == 'admin':
            await update.message.reply_text(
                "‚úÖ –í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                reply_markup=kb.admin_main_menu()
            )
            return states.ADMIN_MENU
        
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
        return states.ADMIN_PASSWORD
    
    async def handle_admin_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.message.text == config.ADMIN_PASSWORD:
            user = utils.get_user_by_telegram_id(update.effective_user.id)
            session = get_db_session()
            try:
                if user:
                    user.role = 'admin'
                else:
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∞
                    user_data = {
                        'user_id': update.effective_user.id,
                        'username': update.effective_user.username,
                        'full_name': update.effective_user.full_name,
                        'role': 'admin'
                    }
                    user = User(**user_data)
                    session.add(user)
                
                session.commit()
                
                await update.message.reply_text(
                    "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
                    reply_markup=kb.admin_main_menu()
                )
                return states.ADMIN_MENU
            except Exception as e:
                session.rollback()
                logger.error(f"Error in admin login: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
                return ConversationHandler.END
            finally:
                session.close()
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return ConversationHandler.END
    
    async def handle_task_project_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        project_id = int(query.data.split('_')[-1])
        return await self.admin_handlers.handle_create_task_project(update, context, project_id)
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = utils.get_user_by_telegram_id(update.effective_user.id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.clear()
        
        if user and user.role == 'admin':
            await update.message.reply_text(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=kb.admin_main_menu()
            )
            return states.ADMIN_MENU
        else:
            await update.message.reply_text(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=kb.user_main_menu()
            )
            return ConversationHandler.END
    
    async def unknown(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )

def main():
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot_practice = BotPractice()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–∏–Ω–≥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å WEBHOOK_URL)
    webhook_url = os.environ.get('WEBHOOK_URL', '')
    if webhook_url:
        utils.keep_alive(webhook_url)
        logger.info("Keep-alive system started")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 8443))
    
    if webhook_url:
        # –î–ª—è production (Render.com)
        bot_practice.application.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=config.BOT_TOKEN,
            webhook_url=f"{webhook_url}/{config.BOT_TOKEN}",
            drop_pending_updates=True
        )
        logger.info("Bot running in webhook mode")
    else:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        bot_practice.application.run_polling(drop_pending_updates=True)
        logger.info("Bot running in polling mode")

if __name__ == '__main__':
    main()